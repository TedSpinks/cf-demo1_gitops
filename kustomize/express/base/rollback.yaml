apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-rollouts.0.0.1
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-rollouts.0.0.1
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
# These (below) are needed for the rollback (haven't tried removing the permissions above)
  - apiGroups:
      - "apps"
    resources:
      - replicasets
    verbs:
      - get
      - list
  - apiGroups:
      - "argoproj.io"
    resources:
      - rollouts
    verbs:
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-rollouts.0.0.1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-rollouts.0.0.1
subjects:
  - kind: ServiceAccount
    name: argo-rollouts.0.0.1
---
# Make this job part of the argocd application -- the annotations _should_ tell it when to run
# https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/
apiVersion: batch/v1
kind: Job
metadata:
  name: express-rollout-fail
#  generateName: rollout-failed-
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  template:
    spec:
      serviceAccountName: argo-rollouts.0.0.1
      containers:
      - name: undo-rollout
        image: quay.io/argoproj/kubectl-argo-rollouts:master
        env:
          - name: ARGOCD_APP_NAME
            value: express-app
          - env: ARGO_ROLLOUT_NAME
            value: express-microservice
        command:
          - |
            # Loop until the deployment has completed (Healthy or Degraded)
            while : ; do
              STATUS=$(kubectl get apps ${ARGOCD_APP_NAME} -ojsonpath='{.status.health.status}');

              test [ "${STATUS}" == "Healthy" ] && exit 0;
              test [ "${STATUS}" == "Degraded" ] && kubectl-argo-rollouts undo ${ARGO_ROLLOUT_NAME};
              sleep 5
            done
      restartPolicy: Never
  backoffLimit: 2
# https://argo-cd.readthedocs.io/en/stable/operator-manual/health/#way-1-define-a-custom-health-check-in-argocd-cm-configmap
# Health statuses
# Healthy - the resource is healthy
# Progressing - the resource is not healthy yet but still making progress and might be healthy soon
# Degraded - the resource is degraded
# Suspended - the resource is suspended and waiting for some external event to resume (e.g. suspended CronJob or paused Deployment)